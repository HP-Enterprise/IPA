
package com.cmos.ipa.service.video_surveillance.streamControlV1;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

/**
 * This class was generated by Apache CXF 3.1.6
 * 2016-05-12T18:18:46.079+08:00
 * Generated source version: 3.1.6
 * 
 */
public final class StreamControlPortType_StreamControl_Client {

    private static final QName SERVICE_NAME = new QName("urn:schemas-pelco-com:service:StreamControl:1", "StreamControl");

    private StreamControlPortType_StreamControl_Client() {
    }

    public static void main(String args[]) throws Exception {
        URL wsdlURL = StreamControl.WSDL_LOCATION;
        if (args.length > 0 && args[0] != null && !"".equals(args[0])) { 
            File wsdlFile = new File(args[0]);
            try {
                if (wsdlFile.exists()) {
                    wsdlURL = wsdlFile.toURI().toURL();
                } else {
                    wsdlURL = new URL(args[0]);
                }
            } catch (MalformedURLException e) {
                e.printStackTrace();
            }
        }
      
        StreamControl ss = new StreamControl(wsdlURL, SERVICE_NAME);
        StreamControlPortType port = ss.getStreamControl();  
        
        {
        System.out.println("Invoking seek...");
        String _seek_sessionId = "";
        String _seek_startTime = "";
        String _seek__return = port.seek(_seek_sessionId, _seek_startTime);
        System.out.println("seek.result=" + _seek__return);


        }
        {
        System.out.println("Invoking frameAdvance...");
        String _frameAdvance_sessionId = "";
        Integer _frameAdvance__return = port.frameAdvance(_frameAdvance_sessionId);
        System.out.println("frameAdvance.result=" + _frameAdvance__return);


        }
        {
        System.out.println("Invoking frameReverse...");
        String _frameReverse_sessionId = "";
        Integer _frameReverse__return = port.frameReverse(_frameReverse_sessionId);
        System.out.println("frameReverse.result=" + _frameReverse__return);


        }
        {
        System.out.println("Invoking markEvent...");
        String _markEvent_sessionId = "";
        String _markEvent_mark = "";
        String _markEvent_timeStamp = "";
        port.markEvent(_markEvent_sessionId, _markEvent_mark, _markEvent_timeStamp);


        }
        {
        System.out.println("Invoking reverse...");
        String _reverse_sessionId = "";
        float _reverse_speed = 0.0f;
        int _reverse_maxBytes = 0;
        String _reverse_actionVersion = "";
        int _reverse_asyncId = 0;
        Integer _reverse__return = port.reverse(_reverse_sessionId, _reverse_speed, _reverse_maxBytes, _reverse_actionVersion, _reverse_asyncId);
        System.out.println("reverse.result=" + _reverse__return);


        }
        {
        System.out.println("Invoking seekEvent...");
        String _seekEvent_sessionId = "";
        String _seekEvent_mark = "";
        String _seekEvent_timeStamp = "";
        boolean _seekEvent_next = false;
        String _seekEvent__return = port.seekEvent(_seekEvent_sessionId, _seekEvent_mark, _seekEvent_timeStamp, _seekEvent_next);
        System.out.println("seekEvent.result=" + _seekEvent__return);


        }
        {
        System.out.println("Invoking pause...");
        String _pause_sessionId = "";
        Integer _pause_asyncIdVal = null;
        javax.xml.ws.Holder<Integer> _pause_asyncId = new javax.xml.ws.Holder<Integer>(_pause_asyncIdVal);
        port.pause(_pause_sessionId, _pause_asyncId);

        System.out.println("pause._pause_asyncId=" + _pause_asyncId.value);

        }
        {
        System.out.println("Invoking play...");
        String _play_sessionId = "";
        float _play_speed = 0.0f;
        int _play_maxBytes = 0;
        String _play_actionVersion = "";
        Integer _play_asyncIdVal = null;
        javax.xml.ws.Holder<Integer> _play_asyncId = new javax.xml.ws.Holder<Integer>(_play_asyncIdVal);
        javax.xml.ws.Holder<Integer> _play_streamPos = new javax.xml.ws.Holder<Integer>();
        port.play(_play_sessionId, _play_speed, _play_maxBytes, _play_actionVersion, _play_asyncId, _play_streamPos);

        System.out.println("play._play_asyncId=" + _play_asyncId.value);
        System.out.println("play._play_streamPos=" + _play_streamPos.value);

        }

        System.exit(0);
    }

}
