
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.cmos.ipa.service.video_surveillance.streamControlV1;

import java.util.logging.Logger;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

/**
 * This class was generated by Apache CXF 3.1.6
 * 2016-05-12T18:18:46.169+08:00
 * Generated source version: 3.1.6
 * 
 */

@WebService(
                      serviceName = "StreamControl",
                      portName = "StreamControl",
                      targetNamespace = "urn:schemas-pelco-com:service:StreamControl:1",
                      wsdlLocation = "file:a/StreamControlV1.wsdl",
                      endpointInterface = "com.cmos.ipa.service.video_surveillance.streamControlV1.StreamControlPortType")
                      
public class StreamControlImpl implements StreamControlPortType {

    private static final Logger LOG = Logger.getLogger(StreamControlImpl.class.getName());

    /* (non-Javadoc)
     * @see com.cmos.ipa.service.video_surveillance.streamControlV1.StreamControlPortType#seek(java.lang.String  sessionId ,)java.lang.String  startTime )*
     */
    public String seek(String sessionId,String startTime) {
        LOG.info("Executing operation seek");
        System.out.println(sessionId);
        System.out.println(startTime);
        try {
            String _return = "";
            return _return;
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.cmos.ipa.service.video_surveillance.streamControlV1.StreamControlPortType#frameAdvance(java.lang.String  sessionId )*
     */
    public Integer frameAdvance(String sessionId) {
        LOG.info("Executing operation frameAdvance");
        System.out.println(sessionId);
        try {
            Integer _return = null;
            return _return;
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.cmos.ipa.service.video_surveillance.streamControlV1.StreamControlPortType#frameReverse(java.lang.String  sessionId )*
     */
    public Integer frameReverse(String sessionId) {
        LOG.info("Executing operation frameReverse");
        System.out.println(sessionId);
        try {
            Integer _return = null;
            return _return;
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.cmos.ipa.service.video_surveillance.streamControlV1.StreamControlPortType#markEvent(java.lang.String  sessionId ,)java.lang.String  mark ,)java.lang.String  timeStamp )*
     */
    public void markEvent(String sessionId,String mark,String timeStamp) {
        LOG.info("Executing operation markEvent");
        System.out.println(sessionId);
        System.out.println(mark);
        System.out.println(timeStamp);
        try {
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.cmos.ipa.service.video_surveillance.streamControlV1.StreamControlPortType#reverse(java.lang.String  sessionId ,)float  speed ,)int  maxBytes ,)java.lang.String  actionVersion ,)int  asyncId )*
     */
    public Integer reverse(String sessionId,float speed,int maxBytes,String actionVersion,int asyncId) {
        LOG.info("Executing operation reverse");
        System.out.println(sessionId);
        System.out.println(speed);
        System.out.println(maxBytes);
        System.out.println(actionVersion);
        System.out.println(asyncId);
        try {
            Integer _return = null;
            return _return;
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.cmos.ipa.service.video_surveillance.streamControlV1.StreamControlPortType#seekEvent(java.lang.String  sessionId ,)java.lang.String  mark ,)java.lang.String  timeStamp ,)boolean  next )*
     */
    public String seekEvent(String sessionId,String mark,String timeStamp,boolean next) {
        LOG.info("Executing operation seekEvent");
        System.out.println(sessionId);
        System.out.println(mark);
        System.out.println(timeStamp);
        System.out.println(next);
        try {
            String _return = "";
            return _return;
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.cmos.ipa.service.video_surveillance.streamControlV1.StreamControlPortType#pause(java.lang.String  sessionId ,)java.lang.Integer  asyncId )*
     */
    public void pause(String sessionId,javax.xml.ws.Holder<Integer> asyncId) {
        LOG.info("Executing operation pause");
        System.out.println(sessionId);
        System.out.println(asyncId.value);
        try {
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.cmos.ipa.service.video_surveillance.streamControlV1.StreamControlPortType#play(java.lang.String  sessionId ,)float  speed ,)int  maxBytes ,)java.lang.String  actionVersion ,)java.lang.Integer  asyncId ,)java.lang.Integer  streamPos )*
     */
    public void play(String sessionId,float speed,int maxBytes,String actionVersion,javax.xml.ws.Holder<Integer> asyncId,javax.xml.ws.Holder<Integer> streamPos) {
        LOG.info("Executing operation play");
        System.out.println(sessionId);
        System.out.println(speed);
        System.out.println(maxBytes);
        System.out.println(actionVersion);
        System.out.println(asyncId.value);
        try {
            Integer streamPosValue = null;
            streamPos.value = streamPosValue;
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

}
